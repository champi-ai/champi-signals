[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "champi-signals"
version = "0.1.0"
description = "Signal management and event processing library for Champi voice assistant services"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
dependencies = [
    "blinker>=1.7.0",
    "loguru>=0.7.0",
]
authors = [
    {name = "Divagnz"}
]
keywords = ["signals", "events", "voice-assistant", "tts", "stt", "ai", "ai-client", "ai-assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]

[project.urls]
Homepage = "https://github.com/Divagnz/champi-signals"
Repository = "https://github.com/Divagnz/champi-signals.git"
Issues = "https://github.com/Divagnz/champi-signals/issues"
Changelog = "https://github.com/Divagnz/champi-signals/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.8.0",
    "commitizen>=3.0.0",
    "pre-commit>=3.0.0",
    "mypy>=1.8.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/champi_signals"]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function call in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["champi_signals"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=champi_signals",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/champi_signals/__init__.py:__version__",
]
update_changelog_on_bump = true
major_version_zero = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "blinker.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "loguru.*"
ignore_missing_imports = true
